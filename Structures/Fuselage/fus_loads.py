from audioop import avg
from tkinter import X
import numpy as np
from matplotlib import pyplot as plt

''''

n = 3
S = 12.3
chord = 1.46
span = 8.48
wing_arm = wing_pos - analysed_centroid_pos
cg_arm = avg_CG - analysed_centroid_pos
tailH_arm = tailH_pos - analysed_centroid_pos
tailV_arm = tailV_pos - analysed_centroid_pos
ailer_arm = 0.4 + (span/2)

def flight_con(h, v):
    alt = h * 0.3048
    T0 = 288.15
    p0 = 101325.0
    g0 = 9.80665
    R = 287.0
    a1 = -0.0065
    T = T0 + a1 * (alt - 0)
    p = p0 * (T / T0) ** (-g0 / (R * a1))
    rho = (p / (R * T))
    q = 0.5 * rho * (v**2)

    return q

def calcLoadsandMoments(n, dyanmicP, pitch_der, roll_der, yaw_der):

    W_aircraft = aircraftMass * g0 #aircraft weight through CG

    M_weight = W_aircraft * cg_arm
    M_lift = (W_aircraft * n) * wing_arm

    M_pitch = ((pitch_der * dyanmicP * chord * S)/tailH_pos) * tailH_arm
    M_roll = ((roll_der * dyanmicP * span * S) * ailer_arm) * 2
    M_yaw = ((yaw_der * dyanmicP * span * S)/tailV_pos) * tailV_pos

    return M_weight, M_lift, M_pitch, M_roll, M_yaw'''

g0 = 9.80665

def flight_con(h, v):
    alt = h * 0.3048
    T0 = 288.15
    p0 = 101325.0
    g0 = 9.80665
    R = 287.0
    a1 = -0.0065
    T = T0 + a1 * (alt - 0)
    p = p0 * (T / T0) ** (-g0 / (R * a1))
    rho = (p / (R * T))
    q = 0.5 * rho * (v**2)

    return q

#flight conditions
altitude = 1000
velocity = 77.17

#aircraft properties
aircraftMass = 979 #mass, [kg]

elevator_der = 0.214 #Cy_de, in []/radians

S = 12.3 #wing area
full_fuse = 7.66 #fuselage length
fw_CG = 3.8 #forward CG position
aft_CG = 4.0 #aft CG position
wing_pos = 4.1125 #wing position
tailH_pos = 6.63 #horizontal tail position
avg_CG = (fw_CG+aft_CG)/2 #average CG position

n = 1 #G-Force
elevator_deflection = 0 #elevator delfection in degrees
W = aircraftMass * g0 #aircraft weight, [N]
F_tail = elevator_der * flight_con(1000, (77.17*0.85)) * (S*0.213) * (elevator_deflection*(np.pi/180)) #force generated by horizontal tail, [N]
By = (F_tail*tailH_pos + avg_CG*W - n*W*wing_pos)/full_fuse #reaction at exhaust support
Ay = W + F_tail - n*W - By #reaction at nose support

Shear = []
Bending = []
x_pos = np.linspace(0, full_fuse, 100)

distributedL_weightFW = avg_CG #fuselage span in front of the CG
distributedL_weightAFT = full_fuse - avg_CG #fuselage span aft of the CG
max_weight_pointFW = (distributedL_weightFW/3) * 2
max_weight_pointAFT = (distributedL_weightAFT/3) + distributedL_weightFW
qFW = W/distributedL_weightFW
qAFT = (W/distributedL_weightAFT)



for i in range(len(x_pos)):
    if 0 <= x_pos[i] <= avg_CG:
        v1 = Ay - ((qFW*(x_pos[i]))/2)
        #v1 = Ay - W
        Shear.append(v1)
    if avg_CG <= x_pos[i] <= full_fuse:
        v2 = Ay - ((qFW*(avg_CG))/2) - ((qAFT*(x_pos[i]-avg_CG))/2) + n*W + F_tail
        #v2 = Ay - W + n*W
        Shear.append(v2)
    #if wing_pos <= x_pos[i] <= full_fuse:
        #v3 = (Ay - ((W*(distributedL_weightFW**2))/(distributedL_weightFW*2))) + ((W*(x_pos[i]**2))/(distributedL_weightAFT*2)) + n*W - F_tail
        #v3 = Ay - W + n*W - F_tail
        #Shear.append(v3)

#print(Shear)
#print(max_weight_pointFW, max_weight_pointAFT)
print(F_tail)
print(By)
print(Ay)
print(W)
print(qFW, qAFT)
print(n*W)
plt.plot(x_pos, Shear)
plt.show()



