Python 3.8.5 (v3.8.5:580fbb018f, Jul 20 2020, 12:11:27) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>> 
from audioop import avg
from re import M
from tkinter import X
from unittest.loader import VALID_MODULE_NAME

import numpy as np
from matplotlib import pyplot as plt


g0 = 9.80665

aircraft = 567    #aircraft mass with no battery or motor, [kg]
bat_mass = 276    #battery mass, [kg]
motor_mass = 33   #motor mass, [kg]
full_fuse = 7.6   #fuselage length, [m]
cg_AC = 4.787     #approximate cg of AC with no batteries or motor ,[m]
wing_pos = 4.112  #wing position, [m]
bat_pos = 1.955   #approximated position of the batteries, [m]
motor_pos = 5.14  #approximated position of the motor, [m]


n = 2.5                         # SET G-LOADING HERE
AC = aircraft * g0              #aircraft weight, [N]
BAT = bat_mass * g0             #battery weight, [N]
MOT = motor_mass * g0           #motor weight, [N]
Wing = (AC + BAT + MOT) * n     #Wing force, [N]
Shear_FW = []
Bending_FW = []
x_pos_FW = np.linspace(0, cg_AC, 10000)

Shear_AFT = []
Bending_AFT = []
x_pos_AFT = np.linspace(0, full_fuse - cg_AC, 10000)

Vx = []
Mx = []

distributedL_weightFW = cg_AC               #fuselage span in front of the CG, [m]
distributedL_weightAFT = full_fuse - cg_AC  #fuselage span aft of the CG, [m]


qFW = (AC * 2)/(distributedL_weightFW**2) * n    #distributed load of the aircraft before the cg
qAFT = (AC * 2)/(distributedL_weightAFT**2) * n  #distributed load of the aircraft after the cg


#macaulay's step functions
for i in range(len(x_pos_FW)):
    if 0 <= x_pos_FW[i] <= bat_pos:
        v1 = ((qFW/(2))*(x_pos_FW[i])**2)
        m1 = ((qFW/(6))*(x_pos_FW[i])**3)
        Shear_FW.append(v1/1000)
        Bending_FW.append(m1/1000)
    if bat_pos <= x_pos_FW[i] <= cg_AC:
        v2 =  BAT + ((qFW/(2))*(x_pos_FW[i] - bat_pos)**2)
        m2 =  BAT * (x_pos_FW[i] - bat_pos) + ((qFW/(6))*(x_pos_FW[i] - bat_pos)**3)
        Shear_FW.append(v2/1000)
        Bending_FW.append(m2/1000)
        
for k in range(len(x_pos_AFT)):
     if 0 <= x_pos_AFT[k] <= (distributedL_weightAFT-(full_fuse-motor_pos)):
        v3 = (((qAFT/(2))*(distributedL_weightAFT - x_pos_AFT[k])**2) + MOT - Wing)
        m3 = (((qAFT/(6))*(distributedL_weightAFT - x_pos_AFT[k])**3) + MOT*(distributedL_weightAFT-(full_fuse-motor_pos) - x_pos_AFT[k]) - Wing*(distributedL_weightAFT-(full_fuse-wing_pos) - x_pos_AFT[k]))
        Shear_AFT.append(v3/1000)
        Bending_AFT.append(m3/1000)
     if distributedL_weightAFT-(full_fuse-motor_pos) <= x_pos_AFT[k] <= distributedL_weightAFT:
        v4 = (((qAFT/(2))*(distributedL_weightAFT - x_pos_AFT[k])**2))
        m4 = (((qAFT/(6))*(distributedL_weightAFT - x_pos_AFT[k])**3))
        Shear_AFT.append(v4/1000)
        Bending_AFT.append(m4/1000)

x_pos_whole = np.linspace(0, full_fuse, (len(x_pos_FW) + len(x_pos_AFT)))
Vx = [*Shear_FW, *Shear_AFT]
Mx = [*Bending_FW, *Bending_AFT]

print("Triangular distributed load on the front half of the fuselage:",qFW, "[N/m^2]")
print("Triangular distributed load on the aft half of the fuselage:",qAFT, "[N/m^2]")

SF = 1.5 #safety factor
print(f"Maximum shear force including a safety factor of {SF} is {max(Vx) * SF}[kN]")
print(f"Maximum bending moment including a safety factor of {SF} is {max(Mx) * SF}[kNm]")

#plot the V-M diagrams
fig,axis=plt.subplots(nrows = 2,ncols = 1)
axis[0].plot((x_pos_whole*1000), (Vx), color='red')
axis[0].set_ylabel("Shear Force [kN]")
axis[0].set_ylim(min(Vx), max(Vx))
axis[0].minorticks_on()
axis[0].grid(True, which='minor', color='#999999', linestyle='-', alpha=0.2)
axis[0].grid(True, which='major', color='#666666', linestyle='-')
axis[0].vlines(3696, ymin = min(Vx), ymax = max(Vx), color='g', ls='--')
axis[0].vlines(4996, ymin = min(Vx), ymax = max(Vx), color='g', ls='--')

axis[1].plot((x_pos_whole*1000), (Mx), color='blue')
axis[1].set_xlabel("Fuselage X-body axis [mm]")
axis[1].set_ylabel("Bending moment [kNm]")
axis[1].set_ylim(min(Mx), max(Mx))
axis[1].minorticks_on()
axis[1].grid(True, which='minor', color='#999999', linestyle='-', alpha=0.2)
axis[1].grid(True, which='major', color='#666666', linestyle='-')
axis[1].vlines(3696, ymin = min(Mx), ymax = max(Mx), color='g', ls='--')
axis[1].vlines(4996, ymin = min(Mx), ymax = max(Mx), color='g', ls='--')
plt.show()

